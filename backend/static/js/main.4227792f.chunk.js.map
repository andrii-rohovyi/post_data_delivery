{"version":3,"sources":["components/SimpleMap.tsx","components/ui/InputNumberComponent.tsx","components/ui/Input.tsx","components/ui/DatePickerRange.tsx","components/ui/InputSelect.tsx","components/AddPointForm.tsx","components/AddPointComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["colors","Marker","children","text","deliveryNumber","courier","startingPoint","droppedNode","ExclamationCircleOutlined","size","style","width","height","className","color","background","borderRadius","padding","display","justifyContent","alignItems","SimpleMap","points","addPoint","result","showResult","float","bootstrapURLKeys","key","defaultCenter","lat","lng","defaultZoom","onClick","event","concat","console","log","Object","entries","map","node","count","point","number","InputNumberComponent","input","meta","rest","min","max","defaultValue","onChange","value","errorText","touched","error","kek","Icon","type","fontSize","InputComponent","suffix","RangePicker","DatePicker","DatePickerRange","Option","Select","SelectComponent","options","option","AddPointForm","setResult","setShowResult","onSubmit","values","a","couriers","data","central_store","location","time_window","valueOf","stores","index","demand","filter","pid","capacity","transport","fetch","method","headers","mode","body","JSON","stringify","rawResponse","json","content","initialValues","length","undefined","mutators","arrayMutators","render","handleSubmit","form","push","pop","pristine","submitting","onFinish","name","fields","position","border","margin","component","placeholder","disabled","marginRight","marginLeft","paddingTop","showTime","remove","cursor","top","right","CloseOutlined","clear","reset","AddPointComponent","App","useState","routes","dropped_nodes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4227792f.chunk.js","sourcesContent":["import React, {Component, useState} from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport {ExclamationCircleOutlined} from \"@ant-design/icons\";\n\ntype MarkerProps = {\n    children?: React.ReactNode,\n    lat: number\n    lng: number\n    text: string\n    courier?: number\n    deliveryNumber?: number,\n    startingPoint?: boolean\n    droppedNode?: boolean\n}\n\n//.cluster-marker {\n//   color: #fff;\n//   background: #1978c8;\n//   border-radius: 50%;\n//   padding: 10px;\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n// }\n//\n// .crime-marker {\n//   background: none;\n//   border: none;\n// }\n//\n// .crime-marker img {\n//   width: 25px;\n// }\n\nconst colors = [\n    \"#900020\",\n    \"#013A20\",\n    \"#000000\",\n    \"#ECF87F\",\n    \"#FFAEBC\",\n    \"#CDD193\",\n    \"#67595E\",\n]\n\nconst Marker: React.FC<MarkerProps> = ({\n   children,\n   text,\n   deliveryNumber ,\n   courier,\n   startingPoint,\n   droppedNode\n}) => (\n    <>\n        {droppedNode ?\n            <ExclamationCircleOutlined size={20} style={{width: \"20px\", height: \"20px\"}}/> :\n            <div\n                className=\"cluster-marker\"\n                style={{\n                    width: \"20px\",\n                    height: \"20px\",\n                    color: \"#fff\",\n                    background: startingPoint ? \"#FAD02C\" : courier ? colors[courier] : \"#900020\",\n                    borderRadius: \"50%\",\n                    padding: \"10px\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\"\n                }}\n            >\n                {deliveryNumber}\n            </div>\n        }\n    </>\n);\ntype PointType = {\n  lat: number,\n  lng: number\n}\n\ntype Response = {\n    routes: PointType[][],\n    dropped_nodes: PointType[][]\n}\n\ntype Props = {\n    points: PointType[],\n    addPoint: (points: PointType[]) => void,\n    result: Response,\n    showResult: boolean\n}\n\nexport const SimpleMap: React.FC<Props> = ({\n   points,\n   addPoint,\n   result,\n   showResult\n}) => {\n\n    const center = {\n      lat: 50.45466,\n      lng: 30.5238\n    }\n\n    const addMapPoint = (event: PointType) => {\n      addPoint(points.concat([{lat: event.lat, lng: event.lng}]))\n    }\n    return (\n      // Important! Always set the container height explicitly\n      <div style={{ height: '100vh', width: '60%', float: \"right\" }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: \"AIzaSyCWYtTeal3a9ttpSA8HYHmgJ21k4gnVMOA\" }}\n          defaultCenter={center}\n          defaultZoom={11}\n          onClick={addMapPoint}\n        >\n            {console.log(result, 'result')}\n            {  // {'routes': [{'lat': [50.4486941427873, 30.52272858686755], 'lng': [50.33231051081023, 30.368480777750914]}], 'dropped_nodes': [{'lat': 50.534377970341886, 'lng': 30.73514947892279}]}\n            }\n\n            {showResult ?\n                Object.entries(result).map(([node, courierPoints]) => {\n                    return (\n                    courierPoints.map((points, count) => {\n                        if (node === 'routes') {\n                            return (\n                        points.map((point, number) => {\n                            if (node === 'routes' && number === 0) {\n                            return (\n                                <Marker\n                                    lat={point.lat}\n                                    lng={point.lng}\n                                    text=\"Starting Point\"\n                                    startingPoint={true}\n                                />\n                            )\n                        }\n                        else if (number !== 0) {\n                                return (\n                                    <Marker\n                                        lat={point.lat}\n                                        lng={point.lng}\n                                        text={`Courier ${count} number ${number}`}\n                                        courier={count}\n                                        deliveryNumber={number}\n                                    />\n                                )\n                            }\n                        return <></>\n\n                        }))\n                        }\n                        else if (node === 'dropped_nodes') {\n                            return (\n                                <Marker\n                                    // @ts-ignore\n                                    lat={points.lat}\n                                    // @ts-ignore\n                                    lng={points.lng}\n                                    text=\"Starting Point\"\n                                    startingPoint={true}\n                                    droppedNode={true}\n                                />\n                            )\n                        }\n                        return <></>\n                    // }\n                    //     return <></>\n                    }))\n                    }) :\n                points.map((point, count) => (\n                  <Marker\n                    lat={point.lat}\n                    lng={point.lng}\n                    text={`Point number ${count}`}\n                    deliveryNumber={count}\n                  />\n              ))\n            }\n        </GoogleMapReact>\n      </div>\n    );\n  }\n\n\nexport default SimpleMap;","import { InputNumber } from \"antd\";\n\nexport const InputNumberComponent = ({ input, meta, ...rest }: any) => {\n    return(\n    <InputNumber\n        {...input}\n        {...rest}\n        min={1}\n        max={10}\n        defaultValue={3}\n        onChange={(value: any) => input.onChange(value)}\n        errorText={meta.touched ? meta.error : ''}\n    />\n)}","import { Input } from 'antd';\nimport Icon from \"@ant-design/icons\";\n\nconst kek = <Icon type=\"smile\" style={{fontSize: \"50px\"}}/>;\n\nexport const InputComponent = ({ input, meta, ...rest }: any) => (\n    <Input\n        {...input}\n        {...rest}\n        onChange={(value: any) => input.onChange(value)}\n        size=\"large\"\n        suffix={kek}\n    />\n)","import { DatePicker } from \"antd\";\n\nconst { RangePicker } = DatePicker;\n\nexport const DatePickerRange = ({ input, meta, ...rest }: any) => {\n    return(\n    <RangePicker\n        {...input}\n        {...rest}\n        min={1}\n        max={10}\n        defaultValue={3}\n        onChange={(value: any) => input.onChange(value)}\n        errorText={meta.touched ? meta.error : ''}\n    />\n)}","import {Select} from \"antd\";\n\nconst { Option } = Select;\n\nexport const SelectComponent = ({ input, meta, options, ...rest }: any) => (\n    <Select\n        {...input}\n        {...rest}\n        onChange={(value: any) => input.onChange(value)}\n        defaultValue={options[0]}\n    >\n        {options.map((option: any) => (\n            <>\n            <Option value={option}>{option}</Option>\n            </>\n        ))}\n\n      </Select>\n)","import React from \"react\";\n\nimport { Form, Field } from 'react-final-form'\nimport {Form as AntForm} from 'antd';\nimport arrayMutators from 'final-form-arrays';\nimport { FieldArray } from 'react-final-form-arrays'\nimport {InputNumberComponent} from \"./ui/InputNumberComponent\";\nimport {InputComponent} from \"./ui/Input\";\nimport { CloseOutlined } from \"@ant-design/icons\";\nimport {DatePickerRange} from \"./ui/DatePickerRange\";\nimport {SelectComponent} from \"./ui/InputSelect\";\n\n\ntype PointType = {\n  lat: number\n  lng: number\n  demand?: number\n  time_window?: [Date, Date]\n}\ntype Props = {\n    points: PointType[],\n    addPoint: (points: PointType[]) => void,\n    result: Response,\n    setResult: (points: Response) => void\n    setShowResult: (showResult: boolean) => void\n}\n\ntype CourierType = {\n    capacity: number,\n    transport: string\n}\n\ntype Values = {\n    points: PointType[],\n    couriers: CourierType[]\n}\n//demand: 2\n//\n// lat: 50.4486941427873\n//\n// lng: 30.52272858686755\n//\n// time_window: Array [ {…}, {…} ]\n\ntype Response = {\n    routes: PointType[][],\n    dropped_nodes: PointType[][]\n}\n\n\n//\"stores\": [ {\"location\": [50.489023, 30.467676], \"demand\": 1, \"time_window\": [0, 1] }, {\"location\": [50.489030, 30.472075], \"demand\": 2, \"time_window\": [2, 3]} ],\n\ntype BackLocation = {\n    location: number[]\n    demand?: number,\n    time_window: number[] | null\n}\n\nexport const AddPointForm: React.FC<Props> = ({\n  points,\n  addPoint,\n  result,\n  setResult,\n  setShowResult\n}) => {\n\n    const onSubmit = async (values: Values) => {\n      // @ts-ignore\n        console.log(values.couriers);\n      const data = {\n          central_store: {\n              location: [values.points[0].lat, values.points[0].lng],\n              time_window: values.points[0].time_window ? [values.points[0].time_window[0].valueOf(), values.points[0].time_window[1].valueOf()] : null\n          },\n          stores: values.points\n              .map((point: PointType, index: number) => index !== 0 ? {\n                  location: [point.lat, point.lng],\n                  demand: point.demand,\n                  time_window: point.time_window ? [point.time_window[0].valueOf(), point.time_window[1].valueOf()] : null\n              } : null)\n              .filter((value: BackLocation | null) => value !== null),\n          couriers: values.couriers.map((courier, index) => ({\n              pid: index,\n              capacity: courier.capacity,\n              transport: courier.transport\n          }))\n      }\n      // @ts-ignore\n        console.log(data, 'data');\n      const rawResponse = await fetch('http://localhost:8080', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        mode: 'cors',\n        body: JSON.stringify(data)\n      });\n\n      const content: Response = await rawResponse.json();\n      setResult(content);\n      setShowResult(true)\n    }\n    return (\n        <Form\n          initialValues={{ points: (points.length && points) || [undefined, undefined], couriers: [undefined] }}\n          onSubmit={onSubmit}\n          mutators={{\n            ...arrayMutators\n          }}\n          render={({\n            handleSubmit,\n            form: {\n              mutators: { push, pop }\n            }, // injected from final-form-arrays above\n            pristine,\n            form,\n            submitting,\n            values,\n          }) => {\n          return (\n              <div style={{padding: \"10px\"}}>\n                <AntForm onFinish={handleSubmit}>\n                  <div style={{padding: \"16px\", width: \"53%\", float: \"left\"}}>\n                    <FieldArray name=\"points\">\n                  {({ fields }) =>\n                    fields.map((name, index) => (\n                      <div\n                          key={name}\n                          style={{\n                              padding: \"10px 0 10px 0\",\n                              position: \"relative\",\n                              border: \"2px solid rgb(255, 145, 0)\",\n                              borderRadius: \"10px\", margin: \"10px 0 10px 0\"\n                          }}\n                      >\n                        <label>Point #{index + 1}</label>\n                          <div>\n                        <Field\n                          name={`${name}.lat`}\n                          component={InputComponent}\n                          placeholder=\"Lat\"\n                          disabled={index === 0}\n                          style={{width: \"40%\", marginRight: \"5px\"}}\n                        />\n                        <Field\n                          name={`${name}.lng`}\n                          component={InputComponent}\n                          placeholder=\"Lon\"\n                          disabled={index === 0}\n                          style={{width: \"40%\", marginLeft: \"5px\"}}\n                        />\n                        </div>\n                          {index !== 0 &&\n                          <div style={{paddingTop: \"10px\"}}>\n                              <label style={{display: \"block\"}}>Demand</label>\n                              <Field\n                                  name={`${name}.demand`}\n                                  component={InputNumberComponent}\n                                  placeholder=\"Demand\"\n                                  style={{width: \"83%\"}}\n                              />\n                          </div>\n                          }\n                          <div style={{paddingTop: \"10px\"}}>\n                          <label>Time window</label>\n                            <Field\n                              name={`${name}.time_window`}\n                              component={DatePickerRange}\n                              showTime={true}\n                              placeholder=\"Time window\"\n                              style={{marginRight: \"5px\"}}\n                            />\n                            <span\n                                onClick={() => index !== 0 ? fields.remove(index) : {}}\n                                style={{\n                                    cursor: index !== 0 ? 'pointer' : 'not-allowed',\n                                    marginLeft: \"5px\",\n                                    position: \"absolute\",\n                                    top: \"49%\",\n                                    right: \"5px\"\n                                }}\n                            >\n                                <CloseOutlined />\n                            </span>\n                              </div>\n                      </div>\n                    ))\n                  }\n                </FieldArray>\n                  </div>\n                    <div style={{padding: \"16px\", width: \"40%\", float: \"right\"}}>\n                      <FieldArray\n                          name=\"couriers\"\n                      >\n                  {({ fields }) =>\n                    fields.map((name, index) => (\n                      <div\n                          key={name}\n                          style={{\n                              padding: \"10px 0 10px 0\",\n                              position: \"relative\",\n                              border: \"2px solid rgb(255, 145, 0)\",\n                              borderRadius: \"10px\", margin: \"10px 0 10px 0\"\n                          }}\n                      >\n                        <label>Courier #{index + 1}</label>\n                          <div>\n                        <Field\n                          name={`${name}.capacity`}\n                          component={InputNumberComponent}\n                          placeholder=\"Capacity\"\n                          style={{width: \"40%\", marginRight: \"5px\"}}\n                        />\n                        <Field\n                          name={`${name}.transport`}\n                          component={SelectComponent}\n                          options={['driving', 'foot']}\n                          placeholder=\"Transport\"\n                          style={{width: \"40%\", marginRight: \"5px\"}}\n                        />\n                    </div>\n                      </div>\n\n                          ))\n                          }\n                          </FieldArray>\n                        <div className=\"buttons\" style={{paddingTop: \"20px\", clear: \"both\"}}>\n                      <button\n                        type=\"button\"\n                        onClick={() => push('couriers', undefined)}\n                      >\n                        Add Courier\n                      </button>\n                      <button type=\"button\" onClick={() => pop('couriers')}>\n                        Remove Courier\n                      </button>\n                        </div>\n                    </div>\n                  <div className=\"buttons\" style={{paddingTop: \"20px\", clear: \"both\"}}>\n                  <button\n                    type=\"button\"\n                    onClick={() => push('points', undefined)}\n                  >\n                    Add Point\n                  </button>\n                  <button type=\"button\" onClick={() => pop('points')}>\n                    Remove Point\n                  </button>\n                    <button type=\"submit\" disabled={submitting || pristine}>\n                      Submit\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => {\n                          form.reset();\n                      }}\n                      disabled={submitting}\n                    >\n                      Reset\n                    </button>\n                  </div>\n                </AntForm>\n              </div>\n    )}}\n          />\n    )\n}","import React from \"react\";\nimport {AddPointForm} from \"./AddPointForm\";\n\ntype PointType = {\n  lat: number,\n  lng: number,\n  demand?: number\n  time_window?: [Date, Date]\n}\n\ntype Response = {\n    routes: PointType[][],\n    dropped_nodes: PointType[][]\n}\n\n\ntype Props = {\n    points: PointType[],\n    addPoint: (points: PointType[]) => void,\n    result: Response,\n    setResult: (points: Response) => void\n    setShowResult: (showResult: boolean) => void\n}\n\nexport const AddPointComponent: React.FC<Props> = ({\n   points,\n   addPoint,\n   result,\n   setResult,\n   setShowResult\n}) => {\n    return (\n        <aside style={{ float: \"left\", width: \"40%\" }}>\n        <AddPointForm\n            points={points}\n            addPoint={addPoint}\n            result={result}\n            setResult={setResult}\n            setShowResult={setShowResult}\n        />\n      </aside>\n    )\n}","import React, {useState} from 'react';\nimport './App.css';\nimport \"antd/dist/antd.css\";\nimport SimpleMap from \"./components/SimpleMap\";\nimport {AddPointComponent} from \"./components/AddPointComponent\";\n\ntype PointType = {\n  lat: number,\n  lng: number,\n  demand?: number\n  time_window?: [Date, Date]\n}\n\ntype Response = {\n    routes: PointType[][],\n    dropped_nodes: PointType[][]\n}\n\nfunction App() {\n  const [points, addPoint] = useState<PointType[]>([{\n  lat: 50.4486941427873,\n  lng: 30.52272858686755\n  }]);\n  const [result, setResult] = useState<Response>({routes: [], dropped_nodes: []});\n  const [showResult, setShowResult] = useState(false);\n  return (\n    <div className=\"App\">\n        <AddPointComponent\n            points={points}\n            addPoint={addPoint}\n            result={result}\n            setResult={setResult}\n            setShowResult={setShowResult}\n        />\n      <div>\n        <SimpleMap points={points} addPoint={addPoint} result={result} showResult={showResult}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}